--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.9) ~  Much Love, Ferib 

]]--

local StrToNumber = tonumber;
local Byte = string.byte;
local Char = string.char;
local Sub = string.sub;
local Subg = string.gsub;
local Rep = string.rep;
local Concat = table.concat;
local Insert = table.insert;
local LDExp = math.ldexp;
local GetFEnv = getfenv or function()
	return _ENV;
end;
local Setmetatable = setmetatable;
local PCall = pcall;
local Select = select;
local Unpack = unpack or table.unpack;
local ToNumber = tonumber;
local function VMCall(ByteString, vmenv, ...)
	local DIP = 1;
	local repeatNext;
	ByteString = Subg(Sub(ByteString, 5), "..", function(byte)
		if ((Byte(byte, 2) == 81) or (4593 <= 2672) or (4609 < 2495)) then
			repeatNext = StrToNumber(Sub(byte, 1, 1));
			return "";
		else
			local a = Char(StrToNumber(byte, 16));
			if ((1152 == 1152) and repeatNext) then
				local b = Rep(a, repeatNext);
				repeatNext = nil;
				return b;
			else
				return a;
			end
		end
	end);
	local function gBit(Bit, Start, End)
		if End then
			local Res = (Bit / (2 ^ (Start - 1))) % (2 ^ (((End - 1) - (Start - 1)) + 1));
			return Res - (Res % 1);
		else
			local Plc = 2 ^ (Start - 1);
			return (((Bit % (Plc + Plc)) >= Plc) and 1) or 0;
		end
	end
	local function gBits8()
		local a = Byte(ByteString, DIP, DIP);
		DIP = DIP + 1;
		return a;
	end
	local function gBits16()
		local a, b = Byte(ByteString, DIP, DIP + 2);
		DIP = DIP + 2;
		return (b * 256) + a;
	end
	local function gBits32()
		local a, b, c, d = Byte(ByteString, DIP, DIP + 3);
		DIP = DIP + 4;
		return (d * 16777216) + (c * 65536) + (b * 256) + a;
	end
	local function gFloat()
		local Left = gBits32();
		local Right = gBits32();
		local IsNormal = 1;
		local Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left;
		local Exponent = gBit(Right, 21, 31);
		local Sign = ((gBit(Right, 32) == 1) and -1) or 1;
		if ((1896 <= 3422) and (Exponent == 0)) then
			if ((Mantissa == 0) or (1168 > 3156)) then
				return Sign * 0;
			else
				Exponent = 1;
				IsNormal = 0;
			end
		elseif ((Exponent == 2047) or (572 > 4486)) then
			return ((Mantissa == 0) and (Sign * (1 / 0))) or (Sign * NaN);
		end
		return LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)));
	end
	local function gString(Len)
		local Str;
		if ((1404 == 1404) and not Len) then
			Len = gBits32();
			if (Len == 0) then
				return "";
			end
		end
		Str = Sub(ByteString, DIP, (DIP + Len) - 1);
		DIP = DIP + Len;
		local FStr = {};
		for Idx = 1, #Str do
			FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx)));
		end
		return Concat(FStr);
	end
	local gInt = gBits32;
	local function _R(...)
		return {...}, Select("#", ...);
	end
	local function Deserialize()
		local Instrs = {};
		local Functions = {};
		local Lines = {};
		local Chunk = {Instrs,Functions,nil,Lines};
		local ConstCount = gBits32();
		local Consts = {};
		for Idx = 1, ConstCount do
			local Type = gBits8();
			local Cons;
			if ((Type == 1) or (3748 < 2212)) then
				Cons = gBits8() ~= 0;
			elseif ((Type == 2) or (1180 == 2180)) then
				Cons = gFloat();
			elseif ((Type == 3) or (990 > 1620)) then
				Cons = gString();
			end
			Consts[Idx] = Cons;
		end
		Chunk[3] = gBits8();
		for Idx = 1, gBits32() do
			local Descriptor = gBits8();
			if (((4090 < 4653) and (gBit(Descriptor, 1, 1) == 0)) or (877 > 4695)) then
				local Type = gBit(Descriptor, 2, 3);
				local Mask = gBit(Descriptor, 4, 6);
				local Inst = {gBits16(),gBits16(),nil,nil};
				if (Type == 0) then
					Inst[3] = gBits16();
					Inst[4] = gBits16();
				elseif ((Type == 1) or (2652 < 196)) then
					Inst[3] = gBits32();
				elseif ((2691 >= 1851) and (Type == 2)) then
					Inst[3] = gBits32() - (2 ^ 16);
				elseif (((4135 < 4817) and (Type == 3)) or (2985 >= 4856)) then
					Inst[3] = gBits32() - (2 ^ 16);
					Inst[4] = gBits16();
				end
				if ((4276 >= 1195) and (272 == 272) and (gBit(Mask, 1, 1) == 1)) then
					Inst[2] = Consts[Inst[2]];
				end
				if ((100 <= 3123) and (gBit(Mask, 2, 2) == 1)) then
					Inst[3] = Consts[Inst[3]];
				end
				if ((3232 <= 4690) and ((gBit(Mask, 3, 3) == 1) or (1369 > 4987))) then
					Inst[4] = Consts[Inst[4]];
				end
				Instrs[Idx] = Inst;
			end
		end
		for Idx = 1, gBits32() do
			Functions[Idx - 1] = Deserialize();
		end
		return Chunk;
	end
	local function Wrap(Chunk, Upvalues, Env)
		local Instr = Chunk[1];
		local Proto = Chunk[2];
		local Params = Chunk[3];
		return function(...)
			local Instr = Instr;
			local Proto = Proto;
			local Params = Params;
			local _R = _R;
			local VIP = 1;
			local Top = -1;
			local Vararg = {};
			local Args = {...};
			local PCount = Select("#", ...) - 1;
			local Lupvals = {};
			local Stk = {};
			for Idx = 0, PCount do
				if ((Idx >= Params) or (896 >= 3146)) then
					Vararg[Idx - Params] = Args[Idx + 1];
				else
					Stk[Idx] = Args[Idx + 1];
				end
			end
			local Varargsz = (PCount - Params) + 1;
			local Inst;
			local Enum;
			while true do
				Inst = Instr[VIP];
				Enum = Inst[1];
				if ((Enum <= 58) or (863 >= 4584)) then
					if (Enum <= 28) then
						if ((3061 >= 2958) and (Enum <= 13)) then
							if ((3187 >= 644) and ((Enum <= 6) or (724 >= 1668))) then
								if ((644 <= 704) and (Enum <= 2)) then
									if ((428 < 1804) and (Enum <= 0)) then
										Stk[Inst[2]] = Stk[Inst[3]] - Inst[4];
									elseif ((Enum > 1) or (3325 > 4613)) then
										Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
									else
										Stk[Inst[2]] = -Stk[Inst[3]];
									end
								elseif (Enum <= 4) then
									if ((Enum > 3) or (4950 <= 4553)) then
										local A = Inst[2];
										local T = Stk[A];
										for Idx = A + 1, Top do
											Insert(T, Stk[Idx]);
										end
									else
										local A = Inst[2];
										Stk[A] = Stk[A](Stk[A + 1]);
									end
								elseif ((2665 <= 3933) and (Enum == 5)) then
									Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
								else
									local A = Inst[2];
									local Index = Stk[A];
									local Step = Stk[A + 2];
									if ((958 > 947) and (Step > 0)) then
										if ((4492 >= 2654) and (3273 == 3273) and (Index > Stk[A + 1])) then
											VIP = Inst[3];
										else
											Stk[A + 3] = Index;
										end
									elseif (Index < Stk[A + 1]) then
										VIP = Inst[3];
									else
										Stk[A + 3] = Index;
									end
								end
							elseif ((3442 >= 1503) and (Enum <= 9)) then
								if ((3824 > 409) and (Enum <= 7)) then
									if ((Inst[2] < Stk[Inst[4]]) or (3170 <= 1464)) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								elseif (((2087 == 2087) and (Enum == 8)) or (4797 == 4388)) then
									local A = Inst[2];
									do
										return Stk[A](Unpack(Stk, A + 1, Inst[3]));
									end
								else
									do
										return;
									end
								end
							elseif (Enum <= 11) then
								if ((551 <= 681) and ((Enum == 10) or (3404 > 4503))) then
									local A = Inst[2];
									local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
									Top = (Limit + A) - 1;
									local Edx = 0;
									for Idx = A, Top do
										Edx = Edx + 1;
										Stk[Idx] = Results[Edx];
									end
								else
									do
										return;
									end
								end
							elseif ((3277 > 407) and (Enum > 12)) then
								if (Stk[Inst[2]] <= Stk[Inst[4]]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							else
								local A = Inst[2];
								Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
							end
						elseif ((4695 >= 1415) and ((Enum <= 20) or (3506 <= 1309))) then
							if (Enum <= 16) then
								if ((Enum <= 14) or (3212 <= 944)) then
									if (((2955 == 2955) and (Stk[Inst[2]] ~= Inst[4])) or (3096 <= 1798)) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								elseif ((Enum > 15) or (2903 == 1495)) then
									if ((4546 >= 2275) and (Inst[2] <= Stk[Inst[4]])) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									local B = Stk[Inst[4]];
									if ((819 >= 22) and not B) then
										VIP = VIP + 1;
									else
										Stk[Inst[2]] = B;
										VIP = Inst[3];
									end
								end
							elseif (Enum <= 18) then
								if ((3537 == 3537) and (3162 == 3162) and (Enum == 17)) then
									local A = Inst[2];
									local T = Stk[A];
									local B = Inst[3];
									for Idx = 1, B do
										T[Idx] = Stk[A + Idx];
									end
								else
									Stk[Inst[2]] = Stk[Inst[3]] - Inst[4];
								end
							elseif ((3837 >= 1570) and (Enum > 19)) then
								Stk[Inst[2]] = Inst[3];
							else
								local NewProto = Proto[Inst[3]];
								local NewUvals;
								local Indexes = {};
								NewUvals = Setmetatable({}, {__index=function(_, Key)
									local Val = Indexes[Key];
									return Val[1][Val[2]];
								end,__newindex=function(_, Key, Value)
									local Val = Indexes[Key];
									Val[1][Val[2]] = Value;
								end});
								for Idx = 1, Inst[4] do
									VIP = VIP + 1;
									local Mvm = Instr[VIP];
									if (Mvm[1] == 77) then
										Indexes[Idx - 1] = {Stk,Mvm[3]};
									else
										Indexes[Idx - 1] = {Upvalues,Mvm[3]};
									end
									Lupvals[#Lupvals + 1] = Indexes;
								end
								Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
							end
						elseif ((Enum <= 24) or (2369 > 4429) or (2950 == 3812)) then
							if (Enum <= 22) then
								if ((4723 >= 2318) and (4095 >= 3183) and (Enum > 21)) then
									Stk[Inst[2]] = Inst[3] + Stk[Inst[4]];
								else
									Stk[Inst[2]] = Inst[3] ^ Stk[Inst[4]];
								end
							elseif ((Enum == 23) or (3711 < 1008) or (2027 > 2852)) then
								local A = Inst[2];
								Stk[A](Unpack(Stk, A + 1, Inst[3]));
							else
								Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
							end
						elseif ((Enum <= 26) or (1136 > 4317)) then
							if ((4748 == 4748) and (Enum > 25)) then
								Stk[Inst[2]] = Inst[3];
							else
								local A = Inst[2];
								Stk[A](Unpack(Stk, A + 1, Top));
							end
						elseif ((3736 <= 4740) and (Enum > 27)) then
							if ((Inst[2] < Stk[Inst[4]]) or (1049 <= 906) or (3390 <= 3060)) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						else
							Stk[Inst[2]][Stk[Inst[3]]] = Inst[4];
						end
					elseif ((Enum <= 43) or (999 > 2693)) then
						if (Enum <= 35) then
							if (Enum <= 31) then
								if ((463 < 601) and (4513 > 2726) and (Enum <= 29)) then
									local A = Inst[2];
									local B = Stk[Inst[3]];
									Stk[A + 1] = B;
									Stk[A] = B[Inst[4]];
								elseif ((Enum > 30) or (2183 < 687)) then
									local A = Inst[2];
									local B = Stk[Inst[3]];
									Stk[A + 1] = B;
									Stk[A] = B[Inst[4]];
								else
									local A = Inst[2];
									local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
									Top = (Limit + A) - 1;
									local Edx = 0;
									for Idx = A, Top do
										Edx = Edx + 1;
										Stk[Idx] = Results[Edx];
									end
								end
							elseif (Enum <= 33) then
								if ((4549 == 4549) and (Enum == 32)) then
									local A = Inst[2];
									local Results, Limit = _R(Stk[A](Stk[A + 1]));
									Top = (Limit + A) - 1;
									local Edx = 0;
									for Idx = A, Top do
										Edx = Edx + 1;
										Stk[Idx] = Results[Edx];
									end
								else
									local A = Inst[2];
									Stk[A](Stk[A + 1]);
								end
							elseif (Enum > 34) then
								Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
							else
								VIP = Inst[3];
							end
						elseif (Enum <= 39) then
							if ((4672 == 4672) and ((Enum <= 37) or (1481 >= 2658))) then
								if ((Enum > 36) or (3220 == 1364)) then
									local A = Inst[2];
									local T = Stk[A];
									local B = Inst[3];
									for Idx = 1, B do
										T[Idx] = Stk[A + Idx];
									end
								else
									Stk[Inst[2]] = #Stk[Inst[3]];
								end
							elseif ((Enum > 38) or (1054 > 3392)) then
								local A = Inst[2];
								do
									return Unpack(Stk, A, A + Inst[3]);
								end
							else
								Upvalues[Inst[3]] = Stk[Inst[2]];
							end
						elseif ((Enum <= 41) or (3668 < 395)) then
							if ((Enum > 40) or (676 >= 1642) or (4166 == 455)) then
								local B = Inst[3];
								local K = Stk[B];
								for Idx = B + 1, Inst[4] do
									K = K .. Stk[Idx];
								end
								Stk[Inst[2]] = K;
							else
								local B = Inst[3];
								local K = Stk[B];
								for Idx = B + 1, Inst[4] do
									K = K .. Stk[Idx];
								end
								Stk[Inst[2]] = K;
							end
						elseif ((Enum == 42) or (4449 == 2663)) then
							if (((4136 > 2397) and (Inst[2] <= Stk[Inst[4]])) or (4277 < 2989)) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						else
							Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
						end
					elseif ((Enum <= 50) or (4334 == 4245) or (870 >= 4149)) then
						if (Enum <= 46) then
							if (Enum <= 44) then
								Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
							elseif ((2212 < 3183) and ((Enum == 45) or (4276 <= 3031))) then
								local A = Inst[2];
								Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
							else
								Stk[Inst[2]] = Stk[Inst[3]] - Stk[Inst[4]];
							end
						elseif ((Enum <= 48) or (4782 <= 1199)) then
							if ((Enum == 47) or (4864 < 1902)) then
								local A = Inst[2];
								Stk[A](Unpack(Stk, A + 1, Inst[3]));
							else
								Stk[Inst[2]] = Stk[Inst[3]] % Inst[4];
							end
						elseif (Enum == 49) then
							Stk[Inst[2]][Stk[Inst[3]]] = Inst[4];
						else
							Env[Inst[3]] = Stk[Inst[2]];
						end
					elseif (Enum <= 54) then
						if ((4839 >= 3700) and (Enum <= 52)) then
							if (Enum == 51) then
								if ((4646 > 2992) and (Inst[2] == Stk[Inst[4]])) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							else
								for Idx = Inst[2], Inst[3] do
									Stk[Idx] = nil;
								end
							end
						elseif (Enum == 53) then
							Stk[Inst[2]] = Upvalues[Inst[3]];
						else
							Stk[Inst[2]] = Inst[3] + Stk[Inst[4]];
						end
					elseif ((1434 < 3106) and ((Enum <= 56) or (1075 > 1918))) then
						if ((396 <= 3804) and (Enum > 55)) then
							local A = Inst[2];
							Stk[A] = Stk[A]();
						else
							VIP = Inst[3];
						end
					elseif ((786 < 3023) and (Enum > 57)) then
						if ((Stk[Inst[2]] ~= Inst[4]) or (4169 == 2187)) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					else
						Stk[Inst[2]] = Stk[Inst[3]];
					end
				elseif (((1406 == 1406) and (Enum <= 88)) or (2442 < 74)) then
					if (Enum <= 73) then
						if ((4535 == 4535) and (Enum <= 65)) then
							if (Enum <= 61) then
								if (((1531 < 4271) and (Enum <= 59)) or (3009 <= 2105)) then
									local A = Inst[2];
									local Index = Stk[A];
									local Step = Stk[A + 2];
									if (Step > 0) then
										if ((1830 < 3669) and (Index > Stk[A + 1])) then
											VIP = Inst[3];
										else
											Stk[A + 3] = Index;
										end
									elseif ((635 == 635) and (Index < Stk[A + 1])) then
										VIP = Inst[3];
									else
										Stk[A + 3] = Index;
									end
								elseif ((3373 <= 3556) and (Enum == 60)) then
									Upvalues[Inst[3]] = Stk[Inst[2]];
								else
									local A = Inst[2];
									Stk[A] = Stk[A]();
								end
							elseif ((Enum <= 63) or (3291 < 3280) or (1430 >= 3612)) then
								if ((4386 >= 873) and (Enum > 62)) then
									local A = Inst[2];
									local Step = Stk[A + 2];
									local Index = Stk[A] + Step;
									Stk[A] = Index;
									if ((2683 >= 2460) and (921 <= 1102) and (Step > 0)) then
										if (((4706 >= 963) and (Index <= Stk[A + 1])) or (1804 >= 3275)) then
											VIP = Inst[3];
											Stk[A + 3] = Index;
										end
									elseif ((Index >= Stk[A + 1]) or (960 <= 876) or (1417 > 3629)) then
										VIP = Inst[3];
										Stk[A + 3] = Index;
									end
								else
									Stk[Inst[2]] = Inst[3] * Stk[Inst[4]];
								end
							elseif ((4795 > 402) and ((Enum == 64) or (2066 == 932))) then
								local A = Inst[2];
								local T = Stk[A];
								for Idx = A + 1, Top do
									Insert(T, Stk[Idx]);
								end
							else
								Stk[Inst[2]] = -Stk[Inst[3]];
							end
						elseif (Enum <= 69) then
							if ((4813 > 3565) and (4825 < 4843) and (Enum <= 67)) then
								if ((3912 == 3912) and ((Enum > 66) or (3877 >= 4537))) then
									if ((2821 <= 4824) and not Stk[Inst[2]]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
								end
							elseif (Enum == 68) then
								Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
							elseif ((Stk[Inst[2]] < Inst[4]) or (4315 < 1726)) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif ((Enum <= 71) or (3679 < 625)) then
							if (Enum == 70) then
								local A = Inst[2];
								Stk[A](Stk[A + 1]);
							else
								Stk[Inst[2]][Inst[3]] = Inst[4];
							end
						elseif ((1738 <= 2195) and ((Enum == 72) or (4625 < 632))) then
							do
								return Stk[Inst[2]];
							end
						else
							Stk[Inst[2]] = Inst[3] * Stk[Inst[4]];
						end
					elseif ((41 <= 3018) and ((Enum <= 80) or (83 > 1780))) then
						if ((546 <= 1077) and (Enum <= 76)) then
							if ((2145 <= 4104) and ((Enum <= 74) or (996 > 4301))) then
								local A = Inst[2];
								local Step = Stk[A + 2];
								local Index = Stk[A] + Step;
								Stk[A] = Index;
								if ((4070 > 687) and (Step > 0)) then
									if ((2689 < 4845) and (Index <= Stk[A + 1])) then
										VIP = Inst[3];
										Stk[A + 3] = Index;
									end
								elseif ((Index >= Stk[A + 1]) or (656 >= 3330)) then
									VIP = Inst[3];
									Stk[A + 3] = Index;
								end
							elseif ((Enum == 75) or (2492 <= 335) or (2322 > 2622)) then
								do
									return Stk[Inst[2]];
								end
							else
								local A = Inst[2];
								local T = Stk[A];
								for Idx = A + 1, Inst[3] do
									Insert(T, Stk[Idx]);
								end
							end
						elseif (((4322 >= 2562) and (Enum <= 78)) or (4534 == 2082)) then
							if ((Enum > 77) or (1571 > 1867)) then
								Stk[Inst[2]] = Stk[Inst[3]] % Stk[Inst[4]];
							else
								Stk[Inst[2]] = Stk[Inst[3]];
							end
						elseif ((Enum > 79) or (2654 >= 2996)) then
							if ((3978 > 2104) and (Stk[Inst[2]] == Inst[4])) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						else
							Stk[Inst[2]] = Env[Inst[3]];
						end
					elseif (Enum <= 84) then
						if (Enum <= 82) then
							if ((2995 > 1541) and (Enum == 81)) then
								for Idx = Inst[2], Inst[3] do
									Stk[Idx] = nil;
								end
							else
								Stk[Inst[2]] = Stk[Inst[3]] % Inst[4];
							end
						elseif ((3249 > 953) and (Enum == 83)) then
							Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
						else
							local A = Inst[2];
							do
								return Unpack(Stk, A, Top);
							end
						end
					elseif ((Enum <= 86) or (3637 >= 3770) or (3273 > 4573)) then
						if ((Enum > 85) or (3151 < 1284)) then
							Stk[Inst[2]] = Upvalues[Inst[3]];
						elseif ((Inst[2] == Stk[Inst[4]]) or (1850 == 1529)) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif ((821 < 2123) and ((Enum > 87) or (2379 > 4578))) then
						local A = Inst[2];
						do
							return Unpack(Stk, A, Top);
						end
					else
						Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
					end
				elseif ((902 < 2325) and (Enum <= 103)) then
					if (Enum <= 95) then
						if (Enum <= 91) then
							if (Enum <= 89) then
								if Stk[Inst[2]] then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif ((Enum > 90) or (483 > 743)) then
								Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
							else
								Env[Inst[3]] = Stk[Inst[2]];
							end
						elseif ((858 <= 2962) and (2454 > 578) and (Enum <= 93)) then
							if ((Enum == 92) or (3946 < 1288)) then
								local A = Inst[2];
								local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Top)));
								Top = (Limit + A) - 1;
								local Edx = 0;
								for Idx = A, Top do
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx];
								end
							elseif (not Stk[Inst[2]] or (3242 == 567)) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif ((Enum > 94) or (847 >= 1263)) then
							Stk[Inst[2]] = Env[Inst[3]];
						else
							local A = Inst[2];
							Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
						end
					elseif ((Enum <= 99) or (2253 == 1851)) then
						if (((930 < 4458) and (Enum <= 97)) or (2087 > 2372)) then
							if ((662 <= 972) and (Enum > 96)) then
								local A = Inst[2];
								local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Top)));
								Top = (Limit + A) - 1;
								local Edx = 0;
								for Idx = A, Top do
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx];
								end
							else
								Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
							end
						elseif ((Enum > 98) or (4445 < 4149)) then
							Stk[Inst[2]] = {};
						else
							local A = Inst[2];
							Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
						end
					elseif ((4370 == 4370) and (Enum <= 101)) then
						if (Enum > 100) then
							Stk[Inst[2]] = #Stk[Inst[3]];
						else
							Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
						end
					elseif ((Enum > 102) or (4762 <= 861)) then
						Stk[Inst[2]] = Stk[Inst[3]] - Stk[Inst[4]];
					else
						Stk[Inst[2]][Inst[3]] = Inst[4];
					end
				elseif ((Enum <= 110) or (1412 == 4264)) then
					if ((Enum <= 106) or (1818 == 85)) then
						if ((630 < 2127) and ((Enum <= 104) or (3168 < 2153))) then
							Stk[Inst[2]] = {};
						elseif (Enum == 105) then
							local A = Inst[2];
							Stk[A] = Stk[A](Stk[A + 1]);
						elseif ((Stk[Inst[2]] == Inst[4]) or (1938 == 2514)) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif ((4255 >= 55) and (Enum <= 108)) then
						if ((2999 > 1156) and ((Enum > 107) or (4976 < 1332))) then
							Stk[Inst[2]] = Inst[3] ^ Stk[Inst[4]];
						else
							Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
						end
					elseif ((2350 > 1155) and (Enum == 109)) then
						local A = Inst[2];
						Stk[A](Unpack(Stk, A + 1, Top));
					else
						Stk[Inst[2]] = Stk[Inst[3]] % Stk[Inst[4]];
					end
				elseif (Enum <= 114) then
					if (Enum <= 112) then
						if ((4029 <= 4853) and (4628 == 4628) and (Enum > 111)) then
							if (Stk[Inst[2]] or (516 > 3434)) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						else
							local B = Stk[Inst[4]];
							if not B then
								VIP = VIP + 1;
							else
								Stk[Inst[2]] = B;
								VIP = Inst[3];
							end
						end
					elseif ((Enum > 113) or (54 == 395)) then
						local A = Inst[2];
						local Results, Limit = _R(Stk[A](Stk[A + 1]));
						Top = (Limit + A) - 1;
						local Edx = 0;
						for Idx = A, Top do
							Edx = Edx + 1;
							Stk[Idx] = Results[Edx];
						end
					else
						Stk[Inst[2]] = Stk[Inst[3]] + Inst[4];
					end
				elseif ((4046 >= 3033) and (Enum <= 116)) then
					if ((82 == 82) and (Enum == 115)) then
						Stk[Inst[2]] = Stk[Inst[3]] + Inst[4];
					elseif ((Stk[Inst[2]] <= Stk[Inst[4]]) or (581 < 282)) then
						VIP = VIP + 1;
					else
						VIP = Inst[3];
					end
				elseif (Enum > 117) then
					if ((Stk[Inst[2]] < Inst[4]) or (2719 <= 1447)) then
						VIP = VIP + 1;
					else
						VIP = Inst[3];
					end
				else
					local A = Inst[2];
					do
						return Stk[A](Unpack(Stk, A + 1, Inst[3]));
					end
				end
				VIP = VIP + 1;
			end
		end;
	end
	return Wrap(Deserialize(), {}, vmenv)(...);
end
return VMCalletFEnv(), ...);